"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[786],{3004:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(5893),i=n(1151);const r={sidebar_position:7},s="Migration from Immer to Mutative",o={id:"advanced-guides/migration",title:"Migration from Immer to Mutative",description:"Mutative is a drop-in replacement for Immer, so you can use it with a few changes.",source:"@site/docs/advanced-guides/migration.md",sourceDirName:"advanced-guides",slug:"/advanced-guides/migration",permalink:"/docs/advanced-guides/migration",draft:!1,unlisted:!1,editUrl:"https://github.com/unadlib/mutative/tree/main/website/docs/advanced-guides/migration.md",tags:[],version:"current",lastUpdatedBy:"unadlib",lastUpdatedAt:172183952e4,sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Typescript",permalink:"/docs/advanced-guides/typescript"},next:{title:"API Reference",permalink:"/docs/category/api-reference"}},c={},d=[{value:"<code>produce()</code> -&gt; <code>create()</code>",id:"produce---create",level:2},{value:"<code>Patches</code>",id:"patches",level:2},{value:"Return <code>undefined</code>",id:"return-undefined",level:2}];function u(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"migration-from-immer-to-mutative",children:"Migration from Immer to Mutative"}),"\n",(0,a.jsx)(t.p,{children:"Mutative is a drop-in replacement for Immer, so you can use it with a few changes."}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://github.com/exuanbo/mutative-compat",children:"mutative-compat"})," - Mutative wrapper with full Immer API compatibility, you can use it to quickly migrate from Immer to Mutative."]})}),"\n",(0,a.jsxs)(t.h2,{id:"produce---create",children:[(0,a.jsx)(t.code,{children:"produce()"})," -> ",(0,a.jsx)(t.code,{children:"create()"})]}),"\n",(0,a.jsxs)(t.p,{children:["Mutative auto freezing option is ",(0,a.jsx)(t.strong,{children:"disabled by default"}),", Immer auto freezing option is enabled by default (if disabled, Immer performance will have a more huge drop)."]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"You need to check if auto freezing has any impact on your project. If it depends on auto freezing, you can enable it yourself in Mutative."}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import produce from 'immer';\n\nconst baseState = {\n  list: [{ text: 'coding' }, { text: 'learning' }],\n};\n\nconst nextState = produce(baseState, (draft) => {\n  draft[1].done = true;\n  draft.push({ title: 'something' });\n});\n"})}),"\n",(0,a.jsx)(t.p,{children:"Use Mutative"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { create } from 'mutative';\n\nconst baseState = {\n  list: [{ text: 'coding' }, { text: 'learning' }],\n};\n\nconst nextState = create(baseState, (draft) => {\n  draft[1].done = true;\n  draft.push({ title: 'something' });\n});\n"})}),"\n",(0,a.jsx)(t.h2,{id:"patches",children:(0,a.jsx)(t.code,{children:"Patches"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { produceWithPatches, applyPatches } from 'immer';\n\nenablePatches();\n\nconst baseState = {\n  info: {\n    name: 'Michael',\n    age: 33,\n  },\n};\n\nconst [nextState, patches, inversePatches] = produceWithPatches(\n  baseState,\n  (draft) => {\n    draft.info.age++;\n  }\n);\n\nconst state = applyPatches(nextState, inversePatches);\n\nexpect(state).toEqual(baseState);\n"})}),"\n",(0,a.jsx)(t.p,{children:"Use Mutative"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { create, apply } from 'mutative';\n\nconst baseState = {\n  info: {\n    name: 'Michael',\n    age: 33,\n  },\n};\n\nconst [nextState, patches, inversePatches] = create(\n  baseState,\n  (draft) => {\n    draft.info.age++;\n  },\n  {\n    enablePatches: true,\n  }\n);\n\nconst state = apply(nextState, inversePatches);\n\nexpect(state).toEqual(baseState);\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"return-undefined",children:["Return ",(0,a.jsx)(t.code,{children:"undefined"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import produce, { nothing } from 'immer';\n\nconst nextState = produce(baseState, (draft) => {\n  return nothing;\n});\n"})}),"\n",(0,a.jsx)(t.p,{children:"Use Mutative"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { create, rawReturn } from 'mutative';\n\nconst nextState = create(baseState, (draft) => {\n  return rawReturn(undefined);\n});\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["For more on how Mutative differs from Immer, visit ",(0,a.jsx)(t.a,{href:"/docs/extra-topics/comparison-with-immer",children:"Mutative vs Immer"}),"."]})})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>s});var a=n(7294);const i={},r=a.createContext(i);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);