"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1409],{9188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=n(5893),i=n(1151);const a={sidebar_position:4},s="current()",o={id:"api-reference/current",title:"current()",description:"Get the current value from a draft.",source:"@site/docs/api-reference/current.md",sourceDirName:"api-reference",slug:"/api-reference/current",permalink:"/docs/api-reference/current",draft:!1,unlisted:!1,editUrl:"https://github.com/unadlib/mutative/tree/main/website/docs/api-reference/current.md",tags:[],version:"current",lastUpdatedBy:"unadlib",lastUpdatedAt:1718639264e3,sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"makeCreator()",permalink:"/docs/api-reference/makecreator"},next:{title:"original()",permalink:"/docs/api-reference/original"}},c={},d=[{value:"Usage",id:"usage",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"current",children:"current()"}),"\n",(0,r.jsx)(t.p,{children:"Get the current value from a draft."}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"current()"})," API provides developers with a way to capture the current state of a draft within the state management process. This function creates a copy of the state at the exact point in time it is called, without the draft's Proxy wrappers. This can be extremely beneficial for debugging, as it allows developers to inspect the state without the additional complexity of proxies."]}),"\n",(0,r.jsxs)(t.p,{children:["Moreover, references to the object returned by ",(0,r.jsx)(t.code,{children:"current()"})," can be safely retained outside of the ",(0,r.jsx)(t.code,{children:"create"})," function without the risk of unintended side effects. It essentially gives you a snapshot of the state in the midst of mutation operations."]}),"\n",(0,r.jsxs)(t.p,{children:["Here's how ",(0,r.jsx)(t.code,{children:"current()"})," behaves within the Mutative:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Objects generated by ",(0,r.jsx)(t.code,{children:"current()"})," will have structural sharing with their original counterparts wherever no modifications have been made."]}),"\n",(0,r.jsxs)(t.li,{children:["If a draft has not been changed, it is usually true that ",(0,r.jsx)(t.a,{href:"/docs/api-reference/original",children:(0,r.jsx)(t.code,{children:"original(draft)"})})," will be strictly equal to ",(0,r.jsx)(t.code,{children:"current(draft)"}),", although this is not a strict guarantee."]}),"\n",(0,r.jsxs)(t.li,{children:["Any subsequent alterations to the draft will not impact the snapshot provided by ",(0,r.jsx)(t.code,{children:"current()"}),", with the exception of undraftable object references that remain mutable."]}),"\n",(0,r.jsxs)(t.li,{children:["Objects retrieved via ",(0,r.jsx)(t.code,{children:"current()"})," are not frozen."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"const baseState = {\n  foo: 'bar',\n  list: [{ text: 'todo' }],\n};\n\nconst state = create(baseState, (draft) => {\n  draft.foo = 'foobar';\n  draft.list.push({ text: 'learning' });\n  expect(current(draft.list)).toEqual([{ text: 'todo' }, { text: 'learning' }]);\n});\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["It is important to note that ",(0,r.jsx)(t.code,{children:"current()"})," should be used judiciously. It is a potentially resource-intensive operation, especially if the draft is a large amount of data. Lastly, ",(0,r.jsx)(t.code,{children:"current()"})," must only be invoked on draft objects and not on original state objects or finalized states."]})})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>s});var r=n(7294);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);