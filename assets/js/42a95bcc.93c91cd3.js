"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6457],{2249:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var r=n(5893),a=n(1151);const s={sidebar_position:6},o="rawReturn()",c={id:"api-reference/rawreturn",title:"rawReturn()",description:"For return values that do not contain any drafts, you can use rawReturn() to wrap this return value to improve performance. It ensure that the return value is only returned explicitly.",source:"@site/docs/api-reference/rawreturn.md",sourceDirName:"api-reference",slug:"/api-reference/rawreturn",permalink:"/docs/api-reference/rawreturn",draft:!1,unlisted:!1,editUrl:"https://github.com/unadlib/mutative/tree/main/website/docs/api-reference/rawreturn.md",tags:[],version:"current",lastUpdatedBy:"unadlib",lastUpdatedAt:1701797985,formattedLastUpdatedAt:"Dec 5, 2023",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"original()",permalink:"/docs/api-reference/original"},next:{title:"unsafe()",permalink:"/docs/api-reference/unsafe"}},i={},u=[{value:"Usage",id:"usage",level:2}];function d(e){const t={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"rawreturn",children:"rawReturn()"}),"\n",(0,r.jsxs)(t.p,{children:["For return values that do not contain any drafts, you can use ",(0,r.jsx)(t.code,{children:"rawReturn()"})," to wrap this return value to improve performance. It ensure that the return value is only returned explicitly."]}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"const baseState = { id: 'test' };\nconst state = create(baseState as { id: string } | undefined, (draft) => {\n  return rawReturn(undefined);\n});\nexpect(state).toBe(undefined);\n"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["If the return value mixes drafts, you should not use ",(0,r.jsx)(t.code,{children:"rawReturn()"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"const baseState = { a: 1, b: { c: 1 } };\nconst state = create(baseState, (draft) => {\n  if (draft.b.c === 1) {\n    return {\n      ...draft,\n      a: 2,\n    };\n  }\n});\nexpect(state).toEqual({ a: 2, b: { c: 1 } });\nexpect(isDraft(state.b)).toBeFalsy();\n"})}),"\n",(0,r.jsxs)(t.p,{children:["If you use ",(0,r.jsx)(t.code,{children:"rawReturn()"}),", we recommend that you enable ",(0,r.jsx)(t.code,{children:"strict"})," mode in development."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"const baseState = { a: 1, b: { c: 1 } };\nconst state = create(\n  baseState,\n  (draft) => {\n    if (draft.b.c === 1) {\n      return rawReturn({\n        ...draft,\n        a: 2,\n      });\n    }\n  },\n  {\n    strict: true,\n  }\n);\n// it will warn `The return value contains drafts, please don't use 'rawReturn()' to wrap the return value.` in strict mode.\nexpect(state).toEqual({ a: 2, b: { c: 1 } });\nexpect(isDraft(state.b)).toBeFalsy();\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>o});var r=n(7294);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);